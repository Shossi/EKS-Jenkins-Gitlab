@Library('shared-library') _

pipeline {
    agent any
    environment {
        run_on_prod = "ssh -o StrictHostKeyChecking=no ubuntu@172.31.6.236"
        buildid = "${currentBuild.number}"
        registry = "yossizxc/weather"
        IMG_NAME = ""
        REGISTRY_URL = "https://index.docker.io/v1/"
        ERROR = ""
        NEXT_VERSION = ""
        GIT_REPO_URL = "https://github.com/Shossi/Weather-Chart"
        GIT_CREDENTIALS_ID = 'github_manifest_repo'
    }
    stages {
        stage('Determine Branch Type') {
            steps {
                script {
                    // Extract the branch name from the git log message
                    def branchName = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                    echo "Detected Branch Name from commit message: ${branchName}"

                    // Extract the source branch name from the commit message
                    def sourceBranchMatcher = branchName =~ /Merge branch '(.+?)' into 'master'/
                    if (sourceBranchMatcher) {
                        branchName = sourceBranchMatcher[0][1]
                    } else {
                        error "Failed to extract source branch from commit message"
                    }
                    echo "Processed Branch Name: ${branchName}"

                    // Determine branch type based on branch name
                    if (branchName.startsWith("hotfix/")) {
                        env.BRANCH_TYPE = "Patch"
                    } else if (branchName.startsWith("feature/")) {
                        env.BRANCH_TYPE = "Minor"
                    } else if (branchName.startsWith("release/")) {
                        env.BRANCH_TYPE = "Major"
                    } else {
                        error "Unknown branch type: ${branchName}"
                    }
                    echo "Branch type: ${env.BRANCH_TYPE}"
                }
            }
        }

        stage('Update Version') {
            steps {
                script {
                    try {
                        NEXT_VERSION = tagCreation('pipeline', BRANCH_TYPE, 'change')
                        echo "Version updated to ${NEXT_VERSION}"
                    } catch (error) {
                        echo "Version update failed - Sending msg to slack"
                        ERROR = error
                        throw error
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('src') {
                    script {
                        try {
                            sh "sudo docker-compose build"
                        } catch (error) {
                            echo "Build failed - Sending msg to slack"
                            ERROR = error
                            throw error
                        }
                    }
                }
            }
        }

        stage('Publish') {
            steps {
                script {
                    try {
                        IMG_NAME = "${registry}:${NEXT_VERSION}.${env.buildid}"
                        echo "Image name: ${IMG_NAME}"
                        sh "sudo docker tag pipeline_gunicorn:latest ${IMG_NAME}"
                        docker.withRegistry("${REGISTRY_URL}", 'docker_id') {
                            docker.image("${IMG_NAME}").push()
                        }
                    } catch (error) {
                        echo "Publish failed - Sending msg to slack"
                        ERROR = error
                        throw error
                    }
                }
            }
        }

        stage("Deployment") {
            steps {
                script {
                    try {
                        sh "git clone ${GIT_REPO_URL}"
                        dir('Weather-Chart') {
                            sh 'git checkout main'
                            withCredentials([string(credentialsId: 'GIT_CREDENTIALS_ID', variable: 'TOKEN')]) {
                                sh """
                                    sed -i 's|tag: .*|tag: ${NEXT_VERSION}.${env.buildid}|' values.yaml
                                    git config user.email "jenkins@yourdomain.com"
                                    git config user.name "Jenkins"
                                    git add values.yaml
                                    git commit -m "Update image tag to ${NEXT_VERSION}.${env.buildid}"
                                    git push https://${TOKEN}@github.com/Shossi/Weather-Chart.git main
                                """
                            }
                        }
                    } catch (error) {
                        echo "Deployment failed - Sending msg to slack"
                        ERROR = error
                        throw error
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                slackSend(channel: "succeeded-build", color: 'good', message: "Build ${buildid} passed successfully")
            }
        }
        failure {
            script {
                slackSend(channel: "devops-alerts", color: 'danger', message: "Build ${buildid} failed! Reason: ${ERROR}")
            }
        }
        always {
            cleanWs()
            sh "docker rmi \$(docker images --filter 'dangling=true' -q --no-trunc)"
            sh "docker system prune -af"
        }
    }
}
